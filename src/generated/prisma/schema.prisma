// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Aluno {
  id             String    @id @default(uuid())
  nome           String    @db.VarChar(120)
  email          String    @unique @db.VarChar(60)
  dataNascimento DateTime? @map("aniversario") @db.Date // ? indica campo opcional, @ indica o nome no banco
  formado        Boolean   @default(false)
  rg             Int?

  // função de auditoria, para histórico de criação e atualização
  dataCriacao     DateTime @default(now()) @map("data_criacao") // @default(now()) define o valor padrão como a data atual
  dataAtualizacao DateTime @updatedAt @map("data_atualizacao") // @updatedAt atualiza automaticamente

  endereco   Endereco?
  avaliacoes Avaliacao[] // lista de avaliações (porque pode ser mais de 1), por isso o colchetes
  matriculas Matricula[] // lista de matrículas, relação N:N com Curso

  @@map("aluno") // 2x @ indica o nome da tabela no banco de dados
}

// Aluno possui 1 endereço, Endereço pertence a 1 Aluno
model Endereco {
  id     String @id
  rua    String @db.VarChar(30)
  bairro String @db.VarChar(30)
  numero Int
  cidade String @db.VarChar(50)

  idAluno String @unique // @unique garante que cada Aluno tenha apenas um Endereço, relação 1:1
  aluno   Aluno  @relation(fields: [idAluno], references: [id])
}

// Aluno pode ter N avaliações, Avaliação pertence a 1 Aluno

model Avaliacao {
  id         String @id @default(uuid())
  disciplina String @db.VarChar(30)
  nota       Int    @db.SmallInt

  dtAvaliacao DateTime @default(now()) @map("data_avaliacao")

  idAluno String @map("id_aluno")
  aluno   Aluno  @relation(fields: [idAluno], references: [id], onDelete: Cascade) // relação 1:N com Aluno

  @@map("avaliacao")
}

model Curso {
  id           String  @id @default(uuid())
  titulo       String
  ementa       String
  cargaHoraria Decimal
  maxAlunos    Int     @default(30) @db.SmallInt
  status       String

  dataCriacao     DateTime @default(now()) @map("data_criacao")
  dataAtualizacao DateTime @updatedAt @map("data_atualizacao")

  matriculas Matricula[] // lista de matrículas, relação N:N com Aluno

  @@map("curso")
}

// Aluno pode se matricular em vários cursos, Curso pode ter vários alunos
model Matricula {
  idAluno String @map("id_aluno")
  idCurso String @map("id_curso")

  dtMatricula DateTime @default(now()) @map("data_matricula")

  aluno Aluno @relation(fields: [idAluno], references: [id], onDelete: Cascade)
  curso Curso @relation(fields: [idCurso], references: [id], onDelete: Cascade)

  @@id([idAluno, idCurso]) // chave primária composta
  @@map("matricula")
}

model Material {
  id         Int     @id @default(autoincrement())
  titulo     String
  descricao  String
  link       String
  disponivel Boolean

  dataCriacao     DateTime @default(now()) @map("data_criacao")
  dataAtualizacao DateTime @updatedAt @map("data_atualizacao")

  @@map("material")
}
